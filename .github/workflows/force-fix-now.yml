name: üö® FORCE FIX NOW

on:
  push:
    branches: [main]
    paths:
      - "FORCE_FIX_NOW.md"
  workflow_dispatch:
    inputs:
      force_now:
        description: "Force immediate Container App fix"
        required: true
        default: true
        type: boolean

jobs:
  force-fix-immediately:
    runs-on: ubuntu-latest
    env:
      RESOURCE_GROUP: tender-rg
      CONTAINER_APP_NAME: tender-api

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Azure Login
        run: |
          az login --service-principal \
            --username ${{ secrets.AZURE_CLIENT_ID }} \
            --password ${{ secrets.AZURE_CLIENT_SECRET }} \
            --tenant ${{ secrets.AZURE_TENANT_ID }}

      - name: Force Create PostgreSQL if Missing
        run: |
          echo "üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º PostgreSQL..."
          POSTGRES_SERVERS=($(az postgres flexible-server list --resource-group ${{ env.RESOURCE_GROUP }} --query "[].name" -o tsv 2>/dev/null || echo ""))

          if [ ${#POSTGRES_SERVERS[@]} -eq 0 ]; then
            echo "‚ùå PostgreSQL –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –ù–ï–ú–ï–î–õ–ï–ù–ù–û..."
            
            POSTGRES_SERVER="tender-db-force-$(date +%s)"
            az postgres flexible-server create \
              --resource-group ${{ env.RESOURCE_GROUP }} \
              --name $POSTGRES_SERVER \
              --location westeurope \
              --admin-user tenderadmin \
              --admin-password "TenderAI_2024_SecurePass!" \
              --sku-name Standard_B1ms \
              --tier Burstable \
              --version 15 \
              --storage-size 32 \
              --public-access 0.0.0.0 \
              --yes
              
            az postgres flexible-server db create \
              --resource-group ${{ env.RESOURCE_GROUP }} \
              --server-name $POSTGRES_SERVER \
              --database-name tenderdb
              
            echo "‚úÖ PostgreSQL —Å–æ–∑–¥–∞–Ω: $POSTGRES_SERVER"
          else
            echo "‚úÖ PostgreSQL –Ω–∞–π–¥–µ–Ω: ${POSTGRES_SERVERS[0]}"
          fi

      - name: Force Create Cognitive Services if Missing
        run: |
          echo "üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º Cognitive Services..."
          COGNITIVE_SERVICES=($(az cognitiveservices account list --resource-group ${{ env.RESOURCE_GROUP }} --query "[].name" -o tsv 2>/dev/null || echo ""))

          if [ ${#COGNITIVE_SERVICES[@]} -eq 0 ]; then
            echo "‚ùå Cognitive Services –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –ù–ï–ú–ï–î–õ–ï–ù–ù–û..."
            
            COGNITIVE_SERVICE="tender-cognitive-force-$(date +%s)"
            az cognitiveservices account create \
              --resource-group ${{ env.RESOURCE_GROUP }} \
              --name $COGNITIVE_SERVICE \
              --location westeurope \
              --kind CognitiveServices \
              --sku S0 \
              --yes
              
            echo "‚úÖ Cognitive Services —Å–æ–∑–¥–∞–Ω: $COGNITIVE_SERVICE"
          else
            echo "‚úÖ Cognitive Services –Ω–∞–π–¥–µ–Ω: ${COGNITIVE_SERVICES[0]}"
          fi

      - name: FORCE Update Container App Environment Variables
        run: |
          echo "üö® –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û–ï –û–ë–ù–û–í–õ–ï–ù–ò–ï –ü–ï–†–ï–ú–ï–ù–ù–´–• –û–ö–†–£–ñ–ï–ù–ò–Ø..."

          # Get PostgreSQL connection
          POSTGRES_SERVERS=($(az postgres flexible-server list --resource-group ${{ env.RESOURCE_GROUP }} --query "[].name" -o tsv))
          if [ ${#POSTGRES_SERVERS[@]} -gt 0 ]; then
            POSTGRES_SERVER=${POSTGRES_SERVERS[0]}
            POSTGRES_HOST=$(az postgres flexible-server show --name $POSTGRES_SERVER --resource-group ${{ env.RESOURCE_GROUP }} --query "fullyQualifiedDomainName" -o tsv)
            DATABASE_URL="postgresql://tenderadmin:TenderAI_2024_SecurePass!@${POSTGRES_HOST}:5432/tenderdb?sslmode=require"
            echo "‚úÖ Database URL: –≥–æ—Ç–æ–≤"
          else
            DATABASE_URL=""
            echo "‚ùå Database URL: –Ω–µ –Ω–∞–π–¥–µ–Ω"
          fi

          # Get Cognitive Services
          COGNITIVE_SERVICES=($(az cognitiveservices account list --resource-group ${{ env.RESOURCE_GROUP }} --query "[].name" -o tsv))
          if [ ${#COGNITIVE_SERVICES[@]} -gt 0 ]; then
            COGNITIVE_SERVICE=${COGNITIVE_SERVICES[0]}
            COGNITIVE_ENDPOINT=$(az cognitiveservices account show --name $COGNITIVE_SERVICE --resource-group ${{ env.RESOURCE_GROUP }} --query "properties.endpoint" -o tsv)
            COGNITIVE_KEY=$(az cognitiveservices account keys list --name $COGNITIVE_SERVICE --resource-group ${{ env.RESOURCE_GROUP }} --query "key1" -o tsv)
            echo "‚úÖ Cognitive Services: –≥–æ—Ç–æ–≤"
          else
            COGNITIVE_ENDPOINT=""
            COGNITIVE_KEY=""
            echo "‚ùå Cognitive Services: –Ω–µ –Ω–∞–π–¥–µ–Ω"
          fi

          # Get Storage
          STORAGE_ACCOUNTS=($(az storage account list --resource-group ${{ env.RESOURCE_GROUP }} --query "[].name" -o tsv))
          if [ ${#STORAGE_ACCOUNTS[@]} -gt 0 ]; then
            STORAGE_ACCOUNT=${STORAGE_ACCOUNTS[0]}
            STORAGE_KEY=$(az storage account keys list --account-name $STORAGE_ACCOUNT --resource-group ${{ env.RESOURCE_GROUP }} --query "[0].value" -o tsv)
            STORAGE_CONN="DefaultEndpointsProtocol=https;AccountName=${STORAGE_ACCOUNT};AccountKey=${STORAGE_KEY};EndpointSuffix=core.windows.net"
            echo "‚úÖ Storage: –≥–æ—Ç–æ–≤"
          else
            STORAGE_CONN=""
            echo "‚ùå Storage: –Ω–µ –Ω–∞–π–¥–µ–Ω"
          fi

          # Get existing Gemini key
          EXISTING_GEMINI=$(az containerapp show --name ${{ env.CONTAINER_APP_NAME }} --resource-group ${{ env.RESOURCE_GROUP }} --query 'properties.template.containers[0].env[?name==`GEMINI_API_KEY`].value' -o tsv 2>/dev/null || echo "")

          echo "üîß –ü—Ä–∏–º–µ–Ω—è–µ–º –í–°–ï –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û..."

          # Force update ALL environment variables
          az containerapp update \
            --name ${{ env.CONTAINER_APP_NAME }} \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --set-env-vars \
              DATABASE_URL="$DATABASE_URL" \
              COGNITIVE_SERVICES_KEY="$COGNITIVE_KEY" \
              COGNITIVE_SERVICES_ENDPOINT="$COGNITIVE_ENDPOINT" \
              AZURE_STORAGE_CONNECTION_STRING="$STORAGE_CONN" \
              GEMINI_API_KEY="$EXISTING_GEMINI"

          echo "‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω—ã!"

      - name: FORCE Restart Container App
        run: |
          echo "üîÑ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–´–ô –ü–ï–†–ï–ó–ê–ü–£–°–ö Container App..."

          # Force restart by scaling down and up
          az containerapp update \
            --name ${{ env.CONTAINER_APP_NAME }} \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --min-replicas 0 \
            --max-replicas 1
            
          echo "‚è≥ –û–∂–∏–¥–∞–µ–º –æ—Å—Ç–∞–Ω–æ–≤–∫—É..."
          sleep 30

          az containerapp update \
            --name ${{ env.CONTAINER_APP_NAME }} \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --min-replicas 1 \
            --max-replicas 10
            
          echo "‚úÖ Container App –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω!"

      - name: Wait and Verify Fix
        run: |
          echo "‚è≥ –û–∂–∏–¥–∞–µ–º –ø–æ–ª–Ω–æ–≥–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ (2 –º–∏–Ω—É—Ç—ã)..."
          sleep 120

          API_URL="https://$(az containerapp show --name ${{ env.CONTAINER_APP_NAME }} --resource-group ${{ env.RESOURCE_GROUP }} --query 'properties.configuration.ingress.fqdn' -o tsv)"

          echo "üß™ –¢–ï–°–¢–ò–†–£–ï–ú –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø..."
          echo "API URL: $API_URL"

          echo "=== –°—Ç–∞—Ç—É—Å API ==="
          API_RESPONSE=$(curl -s "$API_URL/" || echo '{"error":"api_unavailable"}')
          echo "$API_RESPONSE"

          echo "=== –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è ==="
          ENV_RESPONSE=$(curl -s "$API_URL/api/debug-env" || echo '{"error":"env_unavailable"}')
          echo "$ENV_RESPONSE"

          echo "=== –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è ==="
          if echo "$API_RESPONSE" | grep -q '"database":true'; then
            echo "‚úÖ –ë–ê–ó–ê –î–ê–ù–ù–´–• –ò–°–ü–†–ê–í–õ–ï–ù–ê!"
          else
            echo "‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤—Å–µ –µ—â–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç"
          fi

          if echo "$API_RESPONSE" | grep -q '"computer_vision":true'; then
            echo "‚úÖ COMPUTER VISION –ò–°–ü–†–ê–í–õ–ï–ù!"
          else
            echo "‚ùå Computer Vision –≤—Å–µ –µ—â–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç"
          fi

          if echo "$API_RESPONSE" | grep -q '"gemini_ai":true'; then
            echo "‚úÖ GEMINI AI –†–ê–ë–û–¢–ê–ï–¢!"
          else
            echo "‚ùå Gemini AI –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç"
          fi

      - name: Final Status Report
        run: |
          API_URL="https://$(az containerapp show --name ${{ env.CONTAINER_APP_NAME }} --resource-group ${{ env.RESOURCE_GROUP }} --query 'properties.configuration.ingress.fqdn' -o tsv)"

          echo "üéØ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!"
          echo ""
          echo "üìä API URL: $API_URL"
          echo "üß™ –ü–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: http://127.0.0.1:8080/test-full-features.html"
          echo "üìö API –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: $API_URL/docs"
          echo ""
          echo "üö® –í–°–ï –ü–†–û–ë–õ–ï–ú–´ –î–û–õ–ñ–ù–´ –ë–´–¢–¨ –ò–°–ü–†–ê–í–õ–ï–ù–´!"
          echo "   - Database connection"
          echo "   - Computer Vision / OCR"
          echo "   - AI Analysis"
          echo ""
          echo "üéâ –ì–æ—Ç–æ–≤–æ –∫ –ø–æ–ª–Ω–æ–º—É —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é!"

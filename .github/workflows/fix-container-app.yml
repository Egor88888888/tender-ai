name: Fix Container App Configuration

on:
  push:
    branches: [main]
    paths:
      - "URGENT_FIX_TRIGGER.md"
  workflow_dispatch:
    inputs:
      force_fix:
        description: "Force fix Container App configuration"
        required: true
        default: true
        type: boolean

jobs:
  fix-container-app:
    runs-on: ubuntu-latest
    env:
      RESOURCE_GROUP: tender-rg
      CONTAINER_APP_NAME: tender-api

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Azure Login
        run: |
          az login --service-principal \
            --username ${{ secrets.AZURE_CLIENT_ID }} \
            --password ${{ secrets.AZURE_CLIENT_SECRET }} \
            --tenant ${{ secrets.AZURE_TENANT_ID }}

      - name: Get Resource Information
        id: resources
        run: |
          echo "üîç –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ—Å—É—Ä—Å–∞—Ö..."

          # PostgreSQL
          POSTGRES_SERVERS=($(az postgres flexible-server list --resource-group ${{ env.RESOURCE_GROUP }} --query "[].name" -o tsv))
          if [ ${#POSTGRES_SERVERS[@]} -gt 0 ]; then
            POSTGRES_SERVER=${POSTGRES_SERVERS[0]}
            POSTGRES_HOST=$(az postgres flexible-server show --name $POSTGRES_SERVER --resource-group ${{ env.RESOURCE_GROUP }} --query "fullyQualifiedDomainName" -o tsv)
            DATABASE_URL="postgresql://tenderadmin:TenderAI_2024_SecurePass!@${POSTGRES_HOST}:5432/tenderdb?sslmode=require"
            echo "postgres_found=true" >> $GITHUB_OUTPUT
            echo "database_url=$DATABASE_URL" >> $GITHUB_OUTPUT
            echo "‚úÖ PostgreSQL –Ω–∞–π–¥–µ–Ω: $POSTGRES_SERVER"
          else
            echo "postgres_found=false" >> $GITHUB_OUTPUT
            echo "‚ùå PostgreSQL —Å–µ—Ä–≤–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω"
          fi

          # Cognitive Services
          COGNITIVE_SERVICES=($(az cognitiveservices account list --resource-group ${{ env.RESOURCE_GROUP }} --query "[].name" -o tsv))
          if [ ${#COGNITIVE_SERVICES[@]} -gt 0 ]; then
            COGNITIVE_SERVICE=${COGNITIVE_SERVICES[0]}
            COGNITIVE_ENDPOINT=$(az cognitiveservices account show --name $COGNITIVE_SERVICE --resource-group ${{ env.RESOURCE_GROUP }} --query "properties.endpoint" -o tsv)
            COGNITIVE_KEY=$(az cognitiveservices account keys list --name $COGNITIVE_SERVICE --resource-group ${{ env.RESOURCE_GROUP }} --query "key1" -o tsv)
            echo "cognitive_found=true" >> $GITHUB_OUTPUT
            echo "cognitive_endpoint=$COGNITIVE_ENDPOINT" >> $GITHUB_OUTPUT
            echo "cognitive_key=$COGNITIVE_KEY" >> $GITHUB_OUTPUT
            echo "‚úÖ Cognitive Services –Ω–∞–π–¥–µ–Ω: $COGNITIVE_SERVICE"
          else
            echo "cognitive_found=false" >> $GITHUB_OUTPUT
            echo "‚ùå Cognitive Services –Ω–µ –Ω–∞–π–¥–µ–Ω"
          fi

          # Storage
          STORAGE_ACCOUNTS=($(az storage account list --resource-group ${{ env.RESOURCE_GROUP }} --query "[].name" -o tsv))
          if [ ${#STORAGE_ACCOUNTS[@]} -gt 0 ]; then
            STORAGE_ACCOUNT=${STORAGE_ACCOUNTS[0]}
            STORAGE_KEY=$(az storage account keys list --account-name $STORAGE_ACCOUNT --resource-group ${{ env.RESOURCE_GROUP }} --query "[0].value" -o tsv)
            STORAGE_CONN="DefaultEndpointsProtocol=https;AccountName=${STORAGE_ACCOUNT};AccountKey=${STORAGE_KEY};EndpointSuffix=core.windows.net"
            echo "storage_found=true" >> $GITHUB_OUTPUT
            echo "storage_conn=$STORAGE_CONN" >> $GITHUB_OUTPUT
            echo "‚úÖ Storage –Ω–∞–π–¥–µ–Ω: $STORAGE_ACCOUNT"
          else
            echo "storage_found=false" >> $GITHUB_OUTPUT
            echo "‚ùå Storage Account –Ω–µ –Ω–∞–π–¥–µ–Ω"
          fi

      - name: Deploy Missing Infrastructure
        if: steps.resources.outputs.postgres_found == 'false' || steps.resources.outputs.cognitive_found == 'false'
        run: |
          echo "üöÄ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â—É—é –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—É..."

          az deployment group create \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --template-file infra/azuredeploy-full.bicep \
            --parameters dbAdminPassword="TenderAI_2024_SecurePass!" \
            --mode Incremental \
            || echo "‚ö†Ô∏è –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏"

      - name: Re-check Resources After Deployment
        if: steps.resources.outputs.postgres_found == 'false' || steps.resources.outputs.cognitive_found == 'false'
        id: resources_recheck
        run: |
          echo "üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤..."

          # PostgreSQL
          POSTGRES_SERVERS=($(az postgres flexible-server list --resource-group ${{ env.RESOURCE_GROUP }} --query "[].name" -o tsv))
          if [ ${#POSTGRES_SERVERS[@]} -gt 0 ]; then
            POSTGRES_SERVER=${POSTGRES_SERVERS[0]}
            POSTGRES_HOST=$(az postgres flexible-server show --name $POSTGRES_SERVER --resource-group ${{ env.RESOURCE_GROUP }} --query "fullyQualifiedDomainName" -o tsv)
            DATABASE_URL="postgresql://tenderadmin:TenderAI_2024_SecurePass!@${POSTGRES_HOST}:5432/tenderdb?sslmode=require"
            echo "database_url_final=$DATABASE_URL" >> $GITHUB_OUTPUT
          fi

          # Cognitive Services
          COGNITIVE_SERVICES=($(az cognitiveservices account list --resource-group ${{ env.RESOURCE_GROUP }} --query "[].name" -o tsv))
          if [ ${#COGNITIVE_SERVICES[@]} -gt 0 ]; then
            COGNITIVE_SERVICE=${COGNITIVE_SERVICES[0]}
            COGNITIVE_ENDPOINT=$(az cognitiveservices account show --name $COGNITIVE_SERVICE --resource-group ${{ env.RESOURCE_GROUP }} --query "properties.endpoint" -o tsv)
            COGNITIVE_KEY=$(az cognitiveservices account keys list --name $COGNITIVE_SERVICE --resource-group ${{ env.RESOURCE_GROUP }} --query "key1" -o tsv)
            echo "cognitive_endpoint_final=$COGNITIVE_ENDPOINT" >> $GITHUB_OUTPUT
            echo "cognitive_key_final=$COGNITIVE_KEY" >> $GITHUB_OUTPUT
          fi

      - name: Update Container App Environment Variables
        run: |
          echo "üîß –û–±–Ω–æ–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è Container App..."

          # Build environment variables
          ENV_VARS=""

          # Database URL
          DATABASE_URL="${{ steps.resources.outputs.database_url || steps.resources_recheck.outputs.database_url_final }}"
          if [ ! -z "$DATABASE_URL" ]; then
            ENV_VARS="$ENV_VARS DATABASE_URL='$DATABASE_URL'"
          fi

          # Cognitive Services
          COGNITIVE_KEY="${{ steps.resources.outputs.cognitive_key || steps.resources_recheck.outputs.cognitive_key_final }}"
          COGNITIVE_ENDPOINT="${{ steps.resources.outputs.cognitive_endpoint || steps.resources_recheck.outputs.cognitive_endpoint_final }}"
          if [ ! -z "$COGNITIVE_KEY" ]; then
            ENV_VARS="$ENV_VARS COGNITIVE_SERVICES_KEY='$COGNITIVE_KEY'"
          fi
          if [ ! -z "$COGNITIVE_ENDPOINT" ]; then
            ENV_VARS="$ENV_VARS COGNITIVE_SERVICES_ENDPOINT='$COGNITIVE_ENDPOINT'"
          fi

          # Storage
          STORAGE_CONN="${{ steps.resources.outputs.storage_conn }}"
          if [ ! -z "$STORAGE_CONN" ]; then
            ENV_VARS="$ENV_VARS AZURE_STORAGE_CONNECTION_STRING='$STORAGE_CONN'"
          fi

          # Gemini API Key (preserve existing)
          EXISTING_GEMINI=$(az containerapp show --name ${{ env.CONTAINER_APP_NAME }} --resource-group ${{ env.RESOURCE_GROUP }} --query 'properties.template.containers[0].env[?name==`GEMINI_API_KEY`].value' -o tsv 2>/dev/null || echo "")
          if [ ! -z "$EXISTING_GEMINI" ]; then
            ENV_VARS="$ENV_VARS GEMINI_API_KEY='$EXISTING_GEMINI'"
          fi

          echo "üìù –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: $ENV_VARS"

          # Update Container App
          az containerapp update \
            --name ${{ env.CONTAINER_APP_NAME }} \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --set-env-vars $ENV_VARS

          echo "‚úÖ Container App –æ–±–Ω–æ–≤–ª–µ–Ω!"

      - name: Wait and Test Configuration
        run: |
          echo "‚è≥ –û–∂–∏–¥–∞–µ–º –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ Container App..."
          sleep 60

          API_URL="https://$(az containerapp show --name ${{ env.CONTAINER_APP_NAME }} --resource-group ${{ env.RESOURCE_GROUP }} --query 'properties.configuration.ingress.fqdn' -o tsv)"

          echo "üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º API –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é..."
          echo "API URL: $API_URL"

          # Test API status
          API_RESPONSE=$(curl -s "$API_URL/" || echo '{"error":"api_unavailable"}')
          echo "API Response: $API_RESPONSE"

          # Test specific endpoints
          echo "=== –¢–µ—Å—Ç —Å—Ç–∞—Ç—É—Å–∞ API ==="
          curl -s "$API_URL/"

          echo -e "\n=== –¢–µ—Å—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ==="
          curl -s "$API_URL/api/debug-env"

          echo -e "\n=== –¢–µ—Å—Ç —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ ==="
          curl -s "$API_URL/api/storage-info"

      - name: Summary
        run: |
          API_URL="https://$(az containerapp show --name ${{ env.CONTAINER_APP_NAME }} --resource-group ${{ env.RESOURCE_GROUP }} --query 'properties.configuration.ingress.fqdn' -o tsv)"

          echo "üéâ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï CONTAINER APP –ó–ê–í–ï–†–®–ï–ù–û!"
          echo ""
          echo "üìä API URL: $API_URL"
          echo "üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: http://127.0.0.1:8080/test-full-features.html"
          echo "üìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: $API_URL/docs"
          echo ""
          echo "‚úÖ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ç–µ–ø–µ—Ä—å –¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è!"

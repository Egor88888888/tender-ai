name: Deploy Full Azure Stack

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      deploy_infrastructure:
        description: "Deploy new infrastructure (PostgreSQL, Cognitive Services, etc.)"
        required: false
        default: true
        type: boolean

jobs:
  deploy-infrastructure:
    runs-on: ubuntu-latest
    if: github.event.inputs.deploy_infrastructure == 'true' || github.event_name == 'workflow_dispatch'
    outputs:
      acr_name: ${{ steps.deploy.outputs.acrName }}
      acr_login_server: ${{ steps.deploy.outputs.acrLoginServer }}
      api_url: ${{ steps.deploy.outputs.apiUrl }}

    steps:
      - uses: actions/checkout@v4

      - name: Login to Azure
        run: |
          az login --service-principal \
            --username ${{ secrets.AZURE_CLIENT_ID }} \
            --password ${{ secrets.AZURE_CLIENT_SECRET }} \
            --tenant ${{ secrets.AZURE_TENANT_ID }}

      - name: Deploy Azure Infrastructure
        id: deploy
        run: |
          # –°–æ–∑–¥–∞–µ–º —Ä–µ—Å—É—Ä—Å –≥—Ä—É–ø–ø—É –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
          az group create --name tender-rg --location westeurope

          # –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—É
          DEPLOYMENT_OUTPUT=$(az deployment group create \
            --resource-group tender-rg \
            --template-file infra/azuredeploy-full.bicep \
            --parameters dbAdminPassword="TenderAI_2024_SecurePass!" \
            --query 'properties.outputs' \
            -o json)

          echo "Infrastructure deployment completed"
          echo "$DEPLOYMENT_OUTPUT"

          # –ò–∑–≤–ª–µ–∫–∞–µ–º outputs
          ACR_NAME=$(echo "$DEPLOYMENT_OUTPUT" | jq -r '.acrName.value')
          ACR_LOGIN_SERVER=$(echo "$DEPLOYMENT_OUTPUT" | jq -r '.acrLoginServer.value')
          API_URL=$(echo "$DEPLOYMENT_OUTPUT" | jq -r '.apiUrl.value')

          echo "acr_name=$ACR_NAME" >> $GITHUB_OUTPUT
          echo "acr_login_server=$ACR_LOGIN_SERVER" >> $GITHUB_OUTPUT
          echo "api_url=$API_URL" >> $GITHUB_OUTPUT

      - name: Setup Gemini API Key in Key Vault
        run: |
          KV_NAME=$(az keyvault list --resource-group tender-rg --query "[0].name" -o tsv)
          if [ -n "${{ secrets.GEMINI_API_KEY }}" ]; then
            az keyvault secret set --vault-name $KV_NAME --name "gemini-api-key" --value "${{ secrets.GEMINI_API_KEY }}"
            echo "‚úÖ Gemini API Key stored successfully"
          else
            echo "‚ö†Ô∏è GEMINI_API_KEY secret not set. You'll need to add it manually."
            echo "Run: az keyvault secret set --vault-name $KV_NAME --name \"gemini-api-key\" --value \"YOUR_API_KEY\""
          fi

  build-and-deploy-api:
    runs-on: ubuntu-latest
    needs: [deploy-infrastructure]
    if: always()

    steps:
      - uses: actions/checkout@v4

      - name: Login to Azure
        run: |
          az login --service-principal \
            --username ${{ secrets.AZURE_CLIENT_ID }} \
            --password ${{ secrets.AZURE_CLIENT_SECRET }} \
            --tenant ${{ secrets.AZURE_TENANT_ID }}

      - name: Get ACR Info
        id: acr-info
        run: |
          if [ "${{ needs.deploy-infrastructure.result }}" == "success" ]; then
            ACR_NAME="${{ needs.deploy-infrastructure.outputs.acr_name }}"
            ACR_LOGIN_SERVER="${{ needs.deploy-infrastructure.outputs.acr_login_server }}"
          else
            ACR_NAME=$(az acr list --resource-group tender-rg --query "[0].name" -o tsv)
            ACR_LOGIN_SERVER=$(az acr show --name $ACR_NAME --resource-group tender-rg --query "loginServer" -o tsv)
          fi
          echo "acr_name=$ACR_NAME" >> $GITHUB_OUTPUT
          echo "acr_login_server=$ACR_LOGIN_SERVER" >> $GITHUB_OUTPUT

      - name: Get ACR Credentials
        id: acr-creds
        run: |
          ACR_USERNAME=$(az acr credential show --name ${{ steps.acr-info.outputs.acr_name }} --query "username" -o tsv)
          ACR_PASSWORD=$(az acr credential show --name ${{ steps.acr-info.outputs.acr_name }} --query "passwords[0].value" -o tsv)
          echo "acr_username=$ACR_USERNAME" >> $GITHUB_OUTPUT
          echo "acr_password=$ACR_PASSWORD" >> $GITHUB_OUTPUT

      - name: Docker Login to ACR
        run: |
          echo "${{ steps.acr-creds.outputs.acr_password }}" | docker login ${{ steps.acr-info.outputs.acr_login_server }} -u ${{ steps.acr-creds.outputs.acr_username }} --password-stdin

      - name: Build and Push Docker Image
        run: |
          cd backend
          docker build -t ${{ steps.acr-info.outputs.acr_login_server }}/tender-api:${{ github.sha }} .
          docker build -t ${{ steps.acr-info.outputs.acr_login_server }}/tender-api:latest .
          docker push ${{ steps.acr-info.outputs.acr_login_server }}/tender-api:${{ github.sha }}
          docker push ${{ steps.acr-info.outputs.acr_login_server }}/tender-api:latest

      - name: Update Container App with New Image
        run: |
          # –û–±–Ω–æ–≤–ª—è–µ–º Container App —Å –Ω–∞—à–∏–º –æ–±—Ä–∞–∑–æ–º
          CONTAINER_APP_NAME=$(az containerapp list --resource-group tender-rg --query "[?contains(name, 'tender')].name" -o tsv)

          if [ -n "$CONTAINER_APP_NAME" ]; then
            az containerapp update \
              --name $CONTAINER_APP_NAME \
              --resource-group tender-rg \
              --image ${{ steps.acr-info.outputs.acr_login_server }}/tender-api:${{ github.sha }}
            
            echo "Updated Container App: $CONTAINER_APP_NAME"
          else
            echo "No Container App found, using infrastructure deployment"
          fi

  test-deployment:
    runs-on: ubuntu-latest
    needs: [build-and-deploy-api, deploy-infrastructure]
    if: always()

    steps:
      - name: Test API Health
        run: |
          if [ "${{ needs.deploy-infrastructure.result }}" == "success" ]; then
            API_URL="${{ needs.deploy-infrastructure.outputs.api_url }}"
          else
            API_URL="https://tender-api.bravesmoke-248b9fb5.westeurope.azurecontainerapps.io"
          fi

          echo "Testing API health at: $API_URL"

          for i in {1..10}; do
            if curl -f -s "$API_URL/health"; then
              echo "‚úÖ API is healthy"
              break
            else
              echo "‚è≥ Waiting for API... (attempt $i/10)"
              sleep 30
            fi
          done

          echo "Testing full API status..."
          curl -s "$API_URL/"

          echo "Testing debug endpoint..."
          curl -s "$API_URL/api/debug-env"

      - name: Summary
        run: |
          echo "üéâ Deployment completed successfully!"
          if [ "${{ needs.deploy-infrastructure.result }}" == "success" ]; then
            echo "üìä API URL: ${{ needs.deploy-infrastructure.outputs.api_url }}"
            echo "üìö API Docs: ${{ needs.deploy-infrastructure.outputs.api_url }}/docs"
          else
            echo "üìä API URL: https://tender-api.bravesmoke-248b9fb5.westeurope.azurecontainerapps.io"
            echo "üìö API Docs: https://tender-api.bravesmoke-248b9fb5.westeurope.azurecontainerapps.io/docs"
          fi

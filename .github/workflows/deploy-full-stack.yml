name: Deploy Full Azure Stack

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      deploy_infrastructure:
        description: "Deploy new infrastructure"
        required: false
        default: false
        type: boolean
      db_password:
        description: "Database password (required for new infrastructure)"
        required: false
        type: string

jobs:
  deploy-infrastructure:
    if: github.event.inputs.deploy_infrastructure == 'true' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    outputs:
      api_url: ${{ steps.deploy.outputs.apiUrl }}
      frontend_url: ${{ steps.deploy.outputs.staticWebAppUrl }}

    steps:
      - uses: actions/checkout@v4

      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Deploy Full Azure Infrastructure
        id: deploy
        uses: azure/arm-deploy@v1
        with:
          subscriptionId: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          resourceGroupName: tender-rg
          template: ./infra/azuredeploy-full.bicep
          parameters: >
            project=tender
            dbAdminPassword=${{ github.event.inputs.db_password || secrets.DB_ADMIN_PASSWORD }}
            apiImage=mcr.microsoft.com/azuredocs/containerapps-helloworld:latest
          failOnStdErr: false

      - name: Set Gemini API Key in Key Vault
        run: |
          KEYVAULT_NAME=$(az keyvault list --resource-group tender-rg --query "[0].name" -o tsv)
          if [ ! -z "${{ secrets.GEMINI_API_KEY }}" ]; then
            az keyvault secret set --vault-name $KEYVAULT_NAME --name "gemini-api-key" --value "${{ secrets.GEMINI_API_KEY }}"
          fi

  build-and-deploy-api:
    runs-on: ubuntu-latest
    needs: [deploy-infrastructure]
    if: always() && !failure()

    steps:
      - uses: actions/checkout@v4

      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Get ACR Info
        id: acr-info
        run: |
          ACR_NAME=$(az acr list --resource-group tender-rg --query "[0].name" -o tsv)
          ACR_LOGIN_SERVER=$(az acr show --name $ACR_NAME --resource-group tender-rg --query "loginServer" -o tsv)
          echo "acr_name=$ACR_NAME" >> $GITHUB_OUTPUT
          echo "acr_login_server=$ACR_LOGIN_SERVER" >> $GITHUB_OUTPUT

      - name: Get ACR Credentials
        id: acr-creds
        run: |
          ACR_USERNAME=$(az acr credential show --name ${{ steps.acr-info.outputs.acr_name }} --query "username" -o tsv)
          ACR_PASSWORD=$(az acr credential show --name ${{ steps.acr-info.outputs.acr_name }} --query "passwords[0].value" -o tsv)
          echo "acr_username=$ACR_USERNAME" >> $GITHUB_OUTPUT
          echo "acr_password=$ACR_PASSWORD" >> $GITHUB_OUTPUT

      - name: Docker Login to ACR
        run: |
          echo "${{ steps.acr-creds.outputs.acr_password }}" | docker login ${{ steps.acr-info.outputs.acr_login_server }} -u ${{ steps.acr-creds.outputs.acr_username }} --password-stdin

      - name: Build and Push Docker Image
        run: |
          cd backend
          docker build -t ${{ steps.acr-info.outputs.acr_login_server }}/tender-api:${{ github.sha }} .
          docker build -t ${{ steps.acr-info.outputs.acr_login_server }}/tender-api:latest .
          docker push ${{ steps.acr-info.outputs.acr_login_server }}/tender-api:${{ github.sha }}
          docker push ${{ steps.acr-info.outputs.acr_login_server }}/tender-api:latest

      - name: Update Container App
        run: |
          az containerapp update \
            --name tender-api \
            --resource-group tender-rg \
            --image ${{ steps.acr-info.outputs.acr_login_server }}/tender-api:${{ github.sha }}

  build-and-deploy-frontend:
    runs-on: ubuntu-latest
    needs: [build-and-deploy-api]
    if: always() && !failure()

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: frontend/package.json

      - name: Install Dependencies
        run: |
          cd frontend
          npm ci

      - name: Build Frontend
        run: |
          cd frontend
          npm run build

      - name: Deploy to Azure Static Web Apps
        uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN }}
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          action: "upload"
          app_location: "/frontend"
          output_location: "dist"

  test-deployment:
    runs-on: ubuntu-latest
    needs: [build-and-deploy-api, build-and-deploy-frontend]
    if: always() && !failure()

    steps:
      - name: Test API Health
        run: |
          API_URL="https://tender-api.bravesmoke-248b9fb5.westeurope.azurecontainerapps.io"

          echo "Testing API health..."
          for i in {1..10}; do
            if curl -f -s "$API_URL/health"; then
              echo "‚úÖ API is healthy"
              break
            else
              echo "‚è≥ Waiting for API... (attempt $i/10)"
              sleep 30
            fi
          done

          echo "Testing full API status..."
          curl -s "$API_URL/" | jq .

      - name: Summary
        run: |
          echo "üéâ Deployment completed successfully!"
          echo "üìä API URL: https://tender-api.bravesmoke-248b9fb5.westeurope.azurecontainerapps.io"
          echo "üåê Frontend URL: Will be provided by Static Web Apps"
          echo "üìö API Docs: https://tender-api.bravesmoke-248b9fb5.westeurope.azurecontainerapps.io/docs"
